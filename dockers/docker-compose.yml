version: "3"

services:
  # DATABASES
  redis:
    container_name: redis
    build:
      dockerfile: redis/Dockerfile
      context: ./
    restart: unless-stopped
    command: [ "redis-server" ]
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    networks:
      - api

  mongo:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    restart: unless-stopped
    command: mongod --auth
    ports:
      - 27017:27017
    env_file: .env
    volumes:
      - mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
      MONGODB_DATA_DIR: ./volumes/db
      MONGODB_LOG_DIR: /dev/null
    networks:
      - databases
      - api
      - kafka-network

  mongo-express:
    container_name: mongo-express
    image: mongo-express:1.0.0-alpha.4
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${MONGO_URL}
    depends_on:
      - mongo
    networks:
      - databases

  # PYTHON SCRIPTS
  python-twitter:
    container_name: python-twitter
    build:
      dockerfile: python-twitter/Dockerfile
      context: ./
    volumes:
      - ./python-twitter:/usr/src
      - ./feeds:/usr/src/feeds
      - ./tools:/usr/src/tools
    environment:
      UVICORN_PORT: 5001
    ports:
      - 5001:5001
    depends_on:
      - redis
      - mongo
    networks:
      - api
      - kafka-network

  python-tmdb:
    container_name: python-tmdb
    build:
      dockerfile: python-tmdb/Dockerfile
      context: ./
    volumes:
      - ./python-tmdb:/usr/src
      - ./feeds:/usr/src/feeds
      - ./tools:/usr/src/tools
    environment:
      UVICORN_PORT: 5001
    ports:
      - 5002:5001
    depends_on:
      - mongo
      - redis
    networks:
      - api
      - kafka-network

  python-rss:
    container_name: python-RSS
    build:
      dockerfile: python-RSS/Dockerfile
      context: ./
    volumes:
      - ./python-RSS:/usr/src
      - ./feeds:/usr/src/feeds
      - ./tools:/usr/src/tools
    environment:
      UVICORN_PORT: 5001
    ports:
      - 5003:5001
    depends_on:
      - mongo
    networks:
      - api
      - kafka-network

  tmdb-producer:
    container_name: tmdb-producer
    restart: on-failure
    command: python3 ./tmdb_producer.py
    build:
      dockerfile: ./Dockerfile
      context: ./kafka/producer
    volumes:
      - ./kafka/producer:/usr/src
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network

  tmdb-consumer:
    container_name: tmdb-consumer
    restart: on-failure
    command: python3 ./tmdb_consumer.py
    build:
      dockerfile: kafka/consumer/Dockerfile
      context: ./
    depends_on:
      - mongo
      - tmdb-producer
    volumes:
      - ./kafka/consumer:/usr/src
      - ./tools:/usr/src/tools
    networks:
      - kafka-network
  
  rss-producer:
    container_name: rss-producer
    restart: on-failure
    command: python3 ./rss_producer.py
    build:
      dockerfile: ./Dockerfile
      context: ./kafka/producer
    volumes:
      - ./kafka/producer:/usr/src
      - ./.env:/usr/src/.env
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-network
      
  rss-consumer:
    container_name: rss-consumer
    command: python3 ./rss_consumer.py
    restart: on-failure
    build:
      dockerfile: kafka/consumer/Dockerfile
      context: ./
    depends_on:
      - mongo
      - rss-producer
    volumes:
      - ./kafka/consumer:/usr/src
      - ./.env:/usr/src/.env
      - ./tools:/usr/src/tools
      - ./feeds:/usr/src/feeds
    networks:
      - kafka-network

  pipeline-ml:
    container_name: pipeline-ml
    build:
      dockerfile: pipeline-ml/Dockerfile
      context: ./
    depends_on:
      - mongo
    networks:
      - databases

  api-movies:
    container_name: api-movies
    build:
      context: ./
      dockerfile: api/DockerFile
    volumes:
      - ./api:/usr/app
    ports:
      - 5000:5000
    depends_on:
      - mongo
    networks:
      - kafka-network

  # KAFKA
  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    depends_on:
      - zookeeper
      - python-twitter
      - python-tmdb
      - python-rss
    environment:
      KAFKA_CREATE_TOPICS: tmdb,twitter,rss
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    healthcheck:
      test:
        [
          "CMD",
          "bash",
          "-c",
          "unset",
          "JMX_PORT",
          ";",
          "/bin/kafka-topics.sh",
          "--bootstrap-server",
          "localhost:29092",
          "--list"
        ]
      interval: 20s
      timeout: 10s
      retries: 4
    ports:
      - 29092:29092
      - 9092:9092
      - 30001:30001
    networks:
      - kafka-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  # UI
  interface:
    container_name: interface
    build:
      context: ./
      dockerfile: interface/Dockerfile
    volumes:
      - ./interface:/app
    ports:
      - 8080:3000
    depends_on:
      - api-movies


networks:
  databases:
  api:
  kafka-network:


volumes:
  mongo:
  redis_data:
